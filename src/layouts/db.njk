{% extends "base.njk" %}
{% block main %}
{% set od = site.data.opendata %}
{% set ods = site.data.opendata_scores %}
  <div class="container">
    <div class="row">
      &nbsp;
      <div class="fixed">
      {{ content | safe }}

        <p>Prikazano: <span id="count-matching">{{od.resources | length }}</span> resursa</p>

        <p>
        <form>
          <input type="text" id="search-box" placeholder="Pretraga" spellcheck="false" autocorrect="off">
        </form>
        </p>

        <p>
          Datum: {{ od.date }}
        </p>

        <h2>Dopuna skupa</h2>

        <p>tba</p>
      </div>
    </div>
    <div class="row dataset">
      {% for res in od.resources %}
        <div class="resource">
          <h3>{{ res.title }} <a href="{{ res.url }}" target="_blank" class="link"><i class="fas fa-external-link-square-alt"></i></a></h3>
          <div class="tags">
            <span class="tag license">{{ od.licenses[res.license].name }}</span>
            <span class="tag format">{{ res.format }}</span>
            <span class="tag gov">{{ od.owners[res.ownerId].org }}</span>
            <span class="tag src">{{ od.sources[res.sourceId].id }}</span>
          </div>
          <div class="tags">
            <span class="tag health-{{ods[res.id].health}}">{{ ods[res.id].health }}</span>
            <span class="tag online-{{ods[res.id].online}}">{{ "online" if ods[res.id].online else "offline" }}</span>
          </div>
          <div class="description">{{ res.description }}</div>
          <div class="description">
            {{ od.datasets[res.datasetId].description }}
          </div>
          <div class="owner"><i class="far fa-building"></i> {{ od.owners[res.ownerId].name }}</div>
        </div>
      {% endfor %}

    </div>
  </div>

  <script type="application/javascript">

    // Function to set matching count number
const setMatchingCount = count => {
  $("#count-matching").text(count);
};

// set initial matching datasets count

setMatchingCount($(".resource").length);

const $searchBox = $('#search-box');

// Listen for changes in search box and filter based
// on input
$searchBox.on('input', function () {
  let searchText = $(this).val();

  // loop over each item and hide non-matching

  let countMatching = 0;
  $('.resource').each(function() {
    if (isMatch($(this), searchText)) {
      countMatching++;
      $(this).show();
    } else {
      $(this).hide();
    }
  });

  // Set matching datasets count
  setMatchingCount(countMatching);
});

// Make sure we're not trying to submit anything if you press
// enter in the text box
$searchBox.on("keydown", function (e) {
  if (e.key === "Enter") {
    e.preventDefault();
    return;
  }
});

// See if dataset has some match
let isMatch = ($resource, text) => {

  text = text.toLowerCase();

  // title
  const title = $resource.find("h3").text().toLowerCase().trim();
  if (title.indexOf(text) !== -1) {
    return true;
  }

  // description
  const desc = $resource.find(".description").text().toLowerCase().trim();
  if (desc.indexOf(text) !== -1) {
    return true;
  }

  // tags
  const tagsRE = /tags:(.*)/.exec(text);
  if (tagsRE) {
    const tags = tagsRE[1].split(',');
    const resourceTags = $resource.find(".tag");
    let match = false;

    resourceTags.each((index, resTag) => {
      resTag = $(resTag).text().toLowerCase().trim();

      tags.forEach(tag => {
        if (tag.indexOf(resTag) !== -1) {
          match = true;
        }
      });
    });
    if (match) {
      return true;
    }
  }

  // // Short circuit for special case of query like tags:foo,bar
  // const tagsRE = /tags:(.*)/.exec(text);
  // if (tagsRE) {
  //   const tags = tagsRE[1].split(',');
  //   let hasMatch = false;
  //   tags.forEach(function(tag) {
  //     if (dataset.Tags.includes(tag.trim())) {
  //       hasMatch = true;
  //     }
  //   });
  //   if (hasMatch) { return true; }
  // }

  // // Short circuit for special case of query like managedBy:foo
  // var managedByRE = /managedby:(.*)/.exec(text);
  // if(managedByRE && dataset.ManagedBy) {
  //   var managedBy = managedByRE[1];
  //   return dataset.ManagedBy.toLowerCase().includes(managedBy.trim());
  // }

  // // Check resources Type
  // var hasMatch = false;
  // for (var i = 0; i < dataset.Resources.length; i++) {
  //   if (!dataset.Resources[i].Type) { continue; }
  //   if (dataset.Resources[i].Type.toLowerCase().indexOf(text) !== -1) {
  //     hasMatch = true;
  //     break;
  //   }
  // }
  // if (hasMatch) { return true; }


  // If we're here, no match
  return false;
};

const triggerInput = text => {
  $searchBox.focus();
  $searchBox.val(text);
  $searchBox.trigger('input');
};

// Listen for clicks on the tags and go to appropriate page
// $('.tag').click(function () {
//   window.location.href = '/tag/' + $(this).text().replace(/ /g, '-');
// });

// handle query passed in url via ?search=foo
const search = /search=(.*)/.exec(window.location.search);
if (search) {
  triggerInput(decodeURIComponent(search[1]));
}

$searchBox.focus();

</script>
{% endblock %}
