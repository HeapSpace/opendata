{% extends "base.njk" %}
{% block main %}
{% set od = site.data.opendata %}
{% set ods = site.data.opendata_scores %}
  <div class="container">
    <div class="row">
      &nbsp;
      <div class="fixed">
      {{ content | safe }}

        <p>Приказано: <span id="count-matching">{{od.resources | length }}</span> ресурса.<br>
          Датум: {{ od.date }}
        </p>

        <form id="search">
          <input type="text" id="search-box" placeholder="Претрага ресурса..." spellcheck="false" autocorrect="off" autocomplete="false">
        </form>

        <div style="margin-top: 20px;">
          {% for srcId, src in od.sources %}
            <label><input type="checkbox" name="{{ src.id }}" checked><span>{{ src.name }}</span></label><br>
          {% endfor %}
        </div>

      </div>
    </div>
    <div class="row dataset">
      {% for res in od.resources %}
        {% set score = ods[res.id] %}
        <div class="resource">
          <h3>{{ res.title }} <a href="{{ res.url }}" target="_blank" class="link"><i class="fas fa-external-link-square-alt"></i></a></h3>
          <div class="tags">
            <span class="tag license">
              {{ od.licenses[res.license].name }}
            </span>
            <span class="tag format">
              {{ res.format }}
            </span>
            <span class="tag gov">
              {{ od.owners[res.ownerId].org }}
            </span>
            <span class="tag src">
              {{ od.sources[res.sourceId].id }}
            </span>
          </div>
          <div class="scores">
            <span class="tag health-{{score.health}}">
              {{ score.health }}
            </span>
            <span class="tag health-{{score.scores['online']}}">
              {{ "online" if score.scores['online'] == 'HIGH' else "offline" }}
            </span>
            <span class="tag health-{{score.scores['https']}}">
              {{ "https" if score.scores['https'] == 'HIGH' else "insecure" }}
            </span>
            <span class="tag health-{{score.scores['license']}}">
              {{ "R" if score.scores['license'] == 'HIGH'}}
              {{ "C" if score.scores['license'] == 'MEDIUM'}}
              {{ "N" if score.scores['license'] == 'LOW'}}
            </span>
            <span class="tag health-{{score.scores['mread']}}">
              {{ "1" if score.scores['mread'] == 'HIGH'}}
              {{ "0" if score.scores['mread'] == 'LOW'}}
            </span>
          </div>
          <div class="description">{{ res.description }}</div>
          <div class="description">
            {{ od.datasets[res.datasetId].description }}
          </div>
          <div class="owner"><i class="far fa-building"></i> {{ od.owners[res.ownerId].name }}</div>
        </div>
      {% endfor %}

    </div>
  </div>

  <script type="application/javascript">


function delay(callback, ms) {
  let timer = 0;
  return function() {
    const context = this, args = arguments;
    clearTimeout(timer);
    timer = setTimeout(function () {
      callback.apply(context, args);
    }, ms || 0);
  };
}


/**
 * Set matching count number.
 */
const setMatchingCount = count => {
  $("#count-matching").text(count);
};

// set initial matching count
setMatchingCount($(".resource").length);

const $searchBox = $('#search-box');

// Listen for changes in search box and filter based on input
$searchBox.on('input', delay(function() {
  let searchText = $(this).val();

  // prepare sources
  const sources = {};
  $(':checkbox').each((ndx, e) => {
    const c = $(e);
    sources[c.attr('name')] = c.is(':checked');
  });

  // loop over each item and hide non-matching

  let countMatching = 0;
  $('.resource').each(function() {
    if (isMatch($(this), searchText, sources)) {
      countMatching++;
      $(this).show();
    } else {
      $(this).hide();
    }
  });

  // set matching datasets count
  setMatchingCount(countMatching);
},500));

// Don't submit anything if you press enter in the text box
$searchBox.on("keydown", function (e) {
  if (e.key === "Enter") {
    e.preventDefault();
  }
});

/**
 * Convert cyrillic to latin.
 */
function cyr2lat(string) {
  const cyrillic = 'А_Б_В_Г_Д_Ђ_Е_Ё_Ж_З_И_Й_Ј_К_Л_Љ_М_Н_Њ_О_П_Р_С_Т_Ћ_У_Ф_Х_Ц_Ч_Џ_Ш_Щ_Ъ_Ы_Ь_Э_Ю_Я_а_б_в_г_д_ђ_е_ё_ж_з_и_й_ј_к_л_љ_м_н_њ_о_п_р_с_т_ћ_у_ф_х_ц_ч_џ_ш_щ_ъ_ы_ь_э_ю_я'.split('_');
  const latin = 'A_B_V_G_D_Đ_E_Ë_Ž_Z_I_J_J_K_L_Lj_M_N_Nj_O_P_R_S_T_Ć_U_F_H_C_Č_Dž_Š_Ŝ_ʺ_Y_ʹ_È_Û_Â_a_b_v_g_d_đ_e_ë_ž_z_i_j_j_k_l_lj_m_n_nj_o_p_r_s_t_ć_u_f_h_c_č_dž_š_ŝ_ʺ_y_ʹ_è_û_â'.split('_');

  return string.split('').map(function(char) {
    const index = cyrillic.indexOf(char);
    if (!~index) {
      return char;
    }
    return latin[index]
  }).join('')
}

/**
 * Check matches!
 */
let isMatch = ($resource, text, sources) => {
  text = text.toLowerCase();

  // sources
  const source = $resource.find('.tag.src').text().toLowerCase().trim();
  if (!sources[source]) {
    return false;
  }


  // title
  const title = cyr2lat($resource.find("h3").text().toLowerCase().trim());
  if (title.indexOf(text) !== -1) {
    return true;
  }

  // description
  const desc = cyr2lat($resource.find(".description").text().toLowerCase().trim());
  if (desc.indexOf(text) !== -1) {
    return true;
  }

  // tags
  const tagsRE = /t:(.*)/.exec(text);
  if (tagsRE) {
    const tags = tagsRE[1].split(',');
    const resourceTags = $resource.find(".tags .tag");
    let matchCount = 0;

    resourceTags.each((index, resTag) => {
      resTag = $(resTag).text().toLowerCase().trim();

      tags.forEach(tag => {
        if (resTag.indexOf(tag) !== -1) {
          matchCount += 1;
        }
      });
    });
    if (matchCount >= tags.length) {
      return true;
    }
  }

  // scores
  const scoresRE = /s:(.*)/.exec(text);
  if (scoresRE) {
    const scores = scoresRE[1].split(',');
    const resourceTags = $resource.find(".scores .tag");
    let matchCount = 0;

    resourceTags.each((index, resTag) => {
      resTag = $(resTag).text().toLowerCase().trim();

      scores.forEach(score => {
        if (resTag.indexOf(score) !== -1) {
          matchCount += 1;
        }
      });
    });
    if (matchCount >= scores.length) {
      return true;
    }
  }

  // no match
  return false;
};

const triggerInput = text => {
  $searchBox.focus();
  $searchBox.val(text);
  $searchBox.trigger('input');
};

$(':checkbox').change(() => {
  $searchBox.trigger('input');
});

// Listen for clicks on the tags and go to appropriate page
// $('.tag').click(function () {
//   window.location.href = '/tag/' + $(this).text().replace(/ /g, '-');
// });

// handle query passed in url via ?search=foo
const search = /search=(.*)/.exec(window.location.search);
if (search) {
  triggerInput(decodeURIComponent(search[1]));
}

$searchBox.focus();

</script>
{% endblock %}
